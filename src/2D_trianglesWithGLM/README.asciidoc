== 2D Triangles, with GLM
:toc:
:!numbered:

=== Summary

This example introduces using the OpenGL Mathematics library (GLM) to represent the positions of triangles. GLM provides classes and functions similar to GLSL, and allows us to use nice, mathematical classes. For this example we are interested in the `vec2` class, but later on we will also be interested in the matrix classes, and their associated functions. This example renders exactly the same thing as the 2D_triangles example - two triangles, in different positions, each changing differently over time - but uses GLM.

==== Premake

As with other libraries, in order to use GLM, our compiler needs to be able to find it. GLM is a "header-only" library, so we only need to include the headers - no need to specify binary libraries or their locations - the whole library is built from source, straight into our program.

[source, lua]
----
include::../../premake5.lua[tags=headers]
----

==== translationVector (Vertex Shader)

No changes are needed to the Vertex Shader. :-)

==== translationVector (pass:[C++])

Our pass:[C++] variables, can be replaced pretty simply with GLM equivalents. Changing those variables will be easier, as we can now use the operator overloads that the classes provide (so we can just add to vectors, etc). The biggest gotcha is that we can't pass the class to OpenGL directly - remember the OpenGL API is a pure C API. Fortunately, GLM provides utility converts objects for use with OpenGL. Our changes are as follows:

. include the parts of GLM that we need in our pass:[C++]
. change the pass:[C++] variables of `translationVector1` and `translationVector2` to GLM `vec2`
. change the pass:[C++] variables of `translationVelocityVector1` and `translationVelocityVector2` to GLM `vec2`
. use GLM operators to update the pass:[C++] translationVectors over time
. use the GLM utility functions to set the `translationVector` uniform on our program every frame for each triangle, before a call to draw geometry for that triangle

===== Include GLM our pass:[C++]

`glm.hpp` is the main GLM header file, with extra features in headers in the `gtc` and `gtx` directories. For now we just need the main header (which provides `vec2`) and `type_ptr.hpp` which provides the `value_ptr` function to get C pointers from the GLM objects.

[source, cpp]
----
include::main.cpp[tags=includes]
----

===== Positions and velocities

GLM's `vec2` class initializes the same an array of length two, so we can just change the class.

[source, cpp]
----
include::main.cpp[tags=translationVectors]
----

===== Update positions over time

GLM provides operator overloads. This allows us to do vector-vector addition as well as vector-scaler multiplication. This simplifies our update code nicely - we no longer need to address the array elements ourselves, we can just treat the vectors like mathematical vectors. :-)

[source, cpp]
----
include::main.cpp[tags=updateSimulation]
----

===== Set the `translationVector` uniform for each triangle

We can't pass GLM objects directly to OpenGL due to the C API, but the GLM utility function `value_ptr` returns a pointer to the actual (C-accessible) values stored in the object, which we can pass to OpenGL. We previously passed each element of the array separately, now we just pass a pointer to the array, so use the OpenGL function `glUniform2fv` instead. Note that this function also needs a count for the number of elements to be changed (we can have Uniform variables which are arrays of another type). We don't have an array of vec2 in our GLSL, so this is just 1.

[source, cpp]
----
include::main.cpp[tags=render]
----

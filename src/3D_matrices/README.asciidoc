== 3D Triangles, with translations with matrices
:toc:
:!numbered:

=== Summary

This example introduces using matrices to transform our vertices - it renders exactly the same as both 2D_triangles, and 2D_trianglesWithGLM, but the translation of each triangle is performed with matrices. For 2D, we use 3x3 matrices, and for 3D we use 4x4 matrices.

Matrices can represented translations, rotations, scales and other affine transformations, or any combinations of those. This allows us a single representation for the transformation applied to vertices, independent of what the actual transformation is, which we can apply with matrix multiplication.

We can pass matrices into OpenGL easily (they are just arrays of 16 floats), and the GLM library provides us with useful matrix classes.

Using matrices for 2D transformations is highly effective, but for these examples we'll only use them for 3D work (even when actually do 2D work). This is because:

  a. we want to learn how to do 3D transformations
  b. GLM's transformations functions (e.g. `translate`) only support 4x4 matrices
    * OpenGL is always 3D anyway, so we for 2D work, we just fix the z-value (or use the z-value for sorting)

NOTE: remember that matrix multiplication is NOT commutative - that is, the order matters with matrix multiplication.

==== Vertex Shader

We're going to pass matrices into GLSL to control the transformations, instead of the translation vectors. We'll use three matrices - modelMatrix, viewMatrix and projectionMatrix.

Only modelMatrix will have any effect in this example, viewMatrix and projectionMatrix will be used in later examples.

The modelMatrix is used to control the transformation of the model - that is the visual object that we want to see on the screen. In this example, our models are the two triangles.

We'll make all three matrices default to the identity matrix - a matrix that has no effect. Only when we set them from C++ will they have an effect on the vertices.

In order to apply the transformations, each matrix is multiplied by the position. Note the order of these operations.

For reference, the viewMatrix will be used to control when we view our scene from, where we look, and related properties. The projectionMatrix will be used to control how we project the 3D world onto a 2D plane to display.

[source, glsl]
----
include::vertexShader.glsl[]
----

==== pass:[C++]

We're now moving to 3D, so we need to add a third dimension to our vertexData.

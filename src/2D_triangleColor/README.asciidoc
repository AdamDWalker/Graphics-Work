== 2D Triangle Color
:toc:
:!numbered:

The colour of fragments (that *may* be written to the colour buffer) are set in the *fragment shader*.

=== Fragment Shader

In this example, the color is passed to the fragment shader as a `uniform` variable. A `uniform` is a global `GLSL` variable. They do not change from one execution of the shader program to the next.

[source,c++]
.fragment shader
----
include::main.cpp[tags=fragmentShader]
----

=== glGetUniformLocation

`uniform` variables are stored in a program object.

In order to set a `uniform` variable, our C++ code need to know the `location` of the variable in the program object.

In this example we ask OpenGL for this location in `initializeProgram` with https://www.opengl.org/sdk/docs/man4/html/glGetUniform.xhtml[`glGetUniformLocation`].

[source,c++]
.initializeProgram
----
include::main.cpp[tags=initializeProgram]
----

=== glUniform3f

With this location value, and the program object bound, we can set the uniform value in our `render` function with https://www.opengl.org/sdk/docs/man4/html/glUniform.xhtml[`glUniform3f`]

[source,c++]
.render
----
include::main.cpp[tags=render]
----




include::../../doc/_includes/gettingTheSource.asciidoc[]

include::../../doc/_includes/buildAndRunShort.asciidoc[]

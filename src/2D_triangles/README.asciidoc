== 2D Triangles
:toc:
:!numbered:

=== Summary

This example introduces how to draw the same geometry in multiple positions - as a step towards having independent control of the position of visible objects. It renders two triangles, in different positions, each changing differently over time.

==== translationVector (Vertex Shader)

Our Vertex Shader already has a `translationVector` which is used to alter the position of geometry as it comes through the pipeline. To draw the same geometry in a different place we don't need to change the Vertex Shader - just make sure the `translationVector` is set appropriately before calling `glDrawArrays` for each instance we with to show.

==== translationVector (pass:[C++])

We now, visually, have two triangles. In our pass:[C++], and in our OpenGL we only have the data for one. As each triangle has the same geometry and coloration, we can use the same for each. But, we do need to know a different position for each triangle, and assuming they can move differently, a different velocity also. For now, we'll do this by creating two variables for each of these in pass:[C++]. This is pretty ugly pass:[C++] practice - we should consider using a container such as `std::vector` for the set of them, or a class for each renderable object, with the position as a class variable. We'll have a few changes, as follows:

. pass:[C++] variables of `translationVector1` and `translationVector2` - the positions of the two triangles
. pass:[C++] variables of `translationVelocityVector1` and `translationVelocityVector2` - for the triangle's velocities
. update the pass:[C++] translationVectors over time
. set the `translationVector` uniform on our program every frame for each triangle, before a call to draw geometry for that triangle

===== positions and velocities

We'll just use a `GLfloat` array (of length two), for the X and Y components, for each.

[source, cpp]
----
include::main.cpp[tags=translationVectors]
----

===== Update positions over time

[source, cpp]
----
include::main.cpp[tags=updateSimulation]
----

===== Set the `translationVector` uniform for each triangle

The draw call will run with the Uniforms as previously set, so *before* each draw call we need to set the Uniform values for the position of each triangle.

NOTE: we are setting the same variable in the GLSL (`translationVector`), so it will be in the same GLSL location for each, so there is only one `translationVectorLocation`.

[source, cpp]
----
include::main.cpp[tags=render]
----
